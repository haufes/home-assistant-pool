#When the pump control is on automatic, pump will be turned on when the current time is between the start and stop time or it's not a work day
- alias: Pool Pump on
  trigger:
    platform: template
    value_template: "{{  
        ((states('sensor.time') >=(states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) or
          states('sensor.time') < (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) if
          (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False))<=
          (states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) else 
          states('sensor.time') >= (states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) and
          states('sensor.time') < (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)))
        or 
        is_state('binary_sensor.workday_sensor', 'off')) 
        and 
        (is_state('input_select.pump_control', 'Automatic'))}}"
  action:
    - service: switch.turn_on
      entity_id: switch.pool_pump
     
      
#When the pump control is on automatic, pump will be turned off when the current time is not between the start and stop time and it's a work day
- alias: Pool Pump off
  trigger:
    platform: template
    value_template: "{{  
        (not (states('sensor.time') >=(states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) or
          states('sensor.time') < (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) if
          (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False))<=
          (states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) else 
          states('sensor.time') >= (states.input_datetime.pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) and
          states('sensor.time') < (states.input_datetime.pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)))
        and
        is_state('binary_sensor.workday_sensor', 'on')
        and 
        (is_state('input_select.pump_control', 'Automatic')))}}"
  action:
    - service: switch.turn_off
      entity_id: switch.pool_pump    

#When the heat pump control is on automatic, heat pump will be turned on when the current time is between the start and stop time or it's not a work day
- alias: Pool Heat on
  trigger:
    platform: template
    value_template: "{{  
        ((states('sensor.time') >=(states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) or
          states('sensor.time') < (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) if
          (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False))<=
          (states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) else 
          states('sensor.time') >= (states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) and
          states('sensor.time') < (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)))
        or 
        is_state('binary_sensor.workday_sensor', 'off')) 
        and 
        (is_state('input_select.heat_pump_control', 'Automatic'))}}"
  action:
    - service: switch.turn_on
      entity_id: switch.pool_heat_pump
     
      
#When the heat pump control is on automatic, heat pump will be turned off when the current time is not between the start and stop time and it's a work day
- alias: Pool Heat Off
  trigger:
    platform: template
    value_template: "{{  
        (not (states('sensor.time') >=(states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) or
          states('sensor.time') < (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) if
          (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False))<=
          (states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) else 
          states('sensor.time') >= (states.input_datetime.heat_pump_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) and
          states('sensor.time') < (states.input_datetime.heat_pump_stop_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)))
        and
        is_state('binary_sensor.workday_sensor', 'on')
        and 
        (is_state('input_select.heat_pump_control', 'Automatic')))}}"
  action:
    - service: switch.turn_off
      entity_id: switch.pool_heat_pump    

 #Send an alert when the pump is running for 10 minutes with no pressure
- alias: Trigger low presure warning
  trigger:
    platform: state
    entity_id: sensor.pump_low_presure
    from: "False"
    to: "True"
    for:
       minutes: 10
  action:
    - service: notify.notify_pool
      data:
         title : "Pump pressure warning"
         message : "The pump pressure is low and the pump is on!"
    - service: ifttt.trigger
      data: { "event": "pump_status", "value1": "low presure warning"}
              
#After an amount of time the temperature reading in the pipes will be close to the pool temperature                            
- alias: Trigger water temperature is accurate 
  trigger:
    platform: state
    entity_id: sensor.pump_has_presure
    from: "False"
    to: "True"
    for:
       minutes: 15
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.water_temperature_accurate       
      
#No water running in the pipes, the temperature reading will not be accurate
- alias: Trigger water temperature is not accurate 
  trigger:
    platform: state
    entity_id: sensor.pump_has_presure
    from: "True"
    to: "False"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.water_temperature_accurate       
             
              
